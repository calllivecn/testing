#!/usr/bin/env py3
#coding=utf-8
# date 2018-10-11 11:30:53
# author calllivecn <c-all@qq.com>


import re

test_ipv4_false = ["12341.12.31.2","123123.1231","444.11.111.255","alksfi.ase.fas.ef","alksfi.sfe.a.we.fel"]

test_ipv4_true = ["1.1.1.1","255.25.2.5","0.0.0.0","1.22.133.244", "192.168.1.238"]

#ipv4=re.compile(r"^(?:(?:2[0-5][0-5]|1[0-9]{1,2}|[0-9]{1,2})\.){1,3}(?:2[0-5][0-5]|1[0-9]{1,2}|[0-9]{1,2})$")
ipv4=re.compile(r"^(25[0-5]|2[0-4][0-9]|1[0-9]{1,2}|[0-9]{1,2})\.(25[0-5]|2[0-4][0-9]|1[0-9]{1,2}|[0-9]{1,2})\.(25[0-5]|2[0-4][0-9]|1[0-9]{1,2}|[0-9]{1,2})\.(25[0-5]|2[0-4][0-9]|[0-9]{1,2}|[0-9]{1,2})$")

print("ipv4 test ","-"*60)

print("期望结果：正确","#"*60)
for ip in test_ipv4_true:
    result = ipv4.search(ip)
    print("期望结果：正确","--> ",end="")
    if result:
        print("测试结果：正确",result.group())
    else:
        print("测试结果：错误",ip)

print("期望结果：错误","#"*60)
for ip in test_ipv4_false:
    result = ipv4.search(ip)
    print("期望结果：错误","--> ",end="")
    if result:
        print("测试结果：正确",reslut.group())
    else:
        print("测试结果：错误",ip)


print("ipv6 test","-"*60)


test_ipv6_false = ["lskiefj","::1223e","akf::","aaaa:::2",":::","::dfea::1","1::2::3"]

test_ipv6_true = ["::","::1","::1111","::aaaa","::a11a","1::1","aaaf::bbbb","1:2:3:4:5:6:7:8",
                    "a:b:c:d:e:f:1:2",
                    "111::",
                    "aaa::"
                ]


# 这个不完整
#ipv6 = re.compile(r"^(?:(?:[0-9a-fA-F]{1,4}\:){1,7})?(?:[0-9a-fA-F]{1,4})?$")


"""
这是个错误的
ipv6 = re.compile(r'(\A([0-9a-f]{1,4}:){1,1}(:[0-9a-f]{1,4}){1,6}\Z)|'
                 r'(\A([0-9a-f]{1,4}:){1,2}(:[0-9a-f]{1,4}){1,5}\Z)|'
                 r'(\A([0-9a-f]{1,4}:){1,3}(:[0-9a-f]{1,4}){1,4}\Z)|'
                 r'(\A([0-9a-f]{1,4}:){1,4}(:[0-9a-f]{1,4}){1,3}\Z)|'
                 r'(\A([0-9a-f]{1,4}:){1,5}(:[0-9a-f]{1,4}){1,2}\Z)|'
                 r'(\A([0-9a-f]{1,4}:){1,6}(:[0-9a-f]{1,4}){1,1}\Z)|'
                 r'(\A(([0-9a-f]{1,4}:){1,7}|:):\Z)|(\A:(:[0-9a-f]{1,4})'
                 r'{1,7}\Z)|(\A((([0-9a-f]{1,4}:){6})(25[0-5]|2[0-4]\d|[0-1]'
                 r'?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3})\Z)|'
                 r'(\A(([0-9a-f]{1,4}:){5}[0-9a-f]{1,4}:(25[0-5]|2[0-4]\d|'
                 r'[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3})\Z)|'
                 r'(\A([0-9a-f]{1,4}:){5}:[0-9a-f]{1,4}:(25[0-5]|2[0-4]\d|'
                 r'[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z)|'
                 r'(\A([0-9a-f]{1,4}:){1,1}(:[0-9a-f]{1,4}){1,4}:(25[0-5]|'
                 r'2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d))'
                 r'{3}\Z)|(\A([0-9a-f]{1,4}:){1,2}(:[0-9a-f]{1,4}){1,3}:'
                 r'(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?'
                 r'\d?\d)){3}\Z)|(\A([0-9a-f]{1,4}:){1,3}(:[0-9a-f]{1,4})'
                 r'{1,2}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|'
                 r'[0-1]?\d?\d)){3}\Z)|(\A([0-9a-f]{1,4}:){1,4}(:[0-9a-f]'
                 r'{1,4}){1,1}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|'
                 r'2[0-4]\d|[0-1]?\d?\d)){3}\Z)|(\A(([0-9a-f]{1,4}:){1,5}|:):'
                 r'(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?'
                 r'\d?\d)){3}\Z)|(\A:(:[0-9a-f]{1,4}){1,5}:(25[0-5]|2[0-4]\d|'
                 r'[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z)')
"""

ipv6 = re.compile(r'^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$')


print("期望结果：正确","#"*60)
for ip in test_ipv6_true:
    result = ipv6.search(ip)
    print("期望结果：正确","--> ",end="")
    if result:
        print("测试结果：正确",result.group())
    else:
        print("测试结果：错误",ip)

print("期望结果：错误","#"*60)
for ip in test_ipv6_false:
    result = ipv6.search(ip)
    print("期望结果：错误","--> ",end="")
    if result:
        print("测试结果：正确",reslut.group())
    else:
        print("测试结果：错误",ip)
